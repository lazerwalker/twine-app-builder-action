name: 'Twine App Builder'
description: 'Generate desktop binaries for your browser game'
inputs:
  github-token:
    description: Your GitHub token [type?]. You probably want to set to `secrets.GITHUB_TOKEN`.
    required: true
  osx-certificate: 
    description: 'OSX Application Certificate'
  osx-certificate-password:
    description: "Password to unlock the 'osx-certificate' certificate"
  windows-pfx:
    description: "PFX to sign binaries on Windows"
  apple-id:
    description: "The Apple ID you would like to use to notarize/sign Mac builds"
  apple-id-password:
    description: "An app-specific password generated for your Apple ID"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2

    - name: Install Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 12

    - name: Test for presence of Windows or macOS codesigning secrets
      id: vars
      shell: bash
      run: |
        unset HAS_APPLE_CREDS
        if [[ -n $CERTIFICATE_OSX_APPLICATION && -n $CERTIFICATE_PASSWORD ]]; then HAS_APPLE_CREDS='true' ; fi
        echo set-output name=HAS_APPLE_CREDS::${HAS_APPLE_CREDS}

        unset HAS_WINDOWS_CREDS
        if [[ -n $CERTIFICATE_WINDOWS_PFX ]]; then HAS_WINDOWS_CREDS='true' ; fi
        echo set-output name=HAS_WINDOWS_CREDS::${HAS_WINDOWS_CREDS}
      env:
        CERTIFICATE_OSX_APPLICATION: ${{ inputs.osx-certificate }}
        CERTIFICATE_PASSWORD: ${{ inputs.osx-certificate-password }}
        CERTIFICATE_WINDOWS_PFX: ${{ inputs.windows-pfx }}

    - name: Check out Electron app template
      uses: actions/checkout@v2
      with:
        repository: lazerwalker/electron-wrapper-template
        ref: v1.0.0
        path: app

    - name: Set up Electron app environment
      working-directory: ./app
      run: npm install

    - name: move webapp into Electron folder
      run: |
        mv ./src/* ./app/src
        mv ./icon.png ./app

    - name: Generate icons
      working-directory: ./app
      run: npm run build-icons

    - name: Add MacOS certs
      if: matrix.os == 'macos-latest' && steps.vars.outputs.HAS_APPLE_CREDS
      run: |
        KEY_CHAIN=build.keychain
        CERTIFICATE_P12=certificate.p12
        echo $CERTIFICATE_OSX_APPLICATION | base64 --decode > $CERTIFICATE_P12
        security create-keychain -p actions $KEY_CHAIN
        security default-keychain -s $KEY_CHAIN
        security unlock-keychain -p actions $KEY_CHAIN
        security import $CERTIFICATE_P12 -k $KEY_CHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign;
        security set-key-partition-list -S apple-tool:,apple: -s -k actions $KEY_CHAIN
        rm -fr *.p12chmod +x add-osx-cert.sh && ./add-osx-cert.sh
      env:
        CERTIFICATE_OSX_APPLICATION: ${{ inputs.osx-certificate }}
        CERTIFICATE_PASSWORD: ${{ inputs.osx-certificate-password }}

    - name: Add Windows certificate
      if: matrix.os == 'windows-latest' && steps.vars.outputs.HAS_WINDOWS_CREDS
      id: write_file
      uses: timheuer/base64-to-file@v1
      with:
        fileName: "win-certificate.pfx"
        encodedString: ${{ inputs.windows-pfx }}

    - name: Build the app
      working-directory: ./app
      env:
        APP_NAME: Howling Dogs
        APPLE_ID: ${{ inputs.apple-id }}
        APPLE_ID_PASSWORD: ${{ inputs.apple-id-password }}
        WINDOWS_PFX_FILE: ${{ steps.write_file.outputs.filePath }}
        WINDOWS_PFX_PASSWORD: ${{ inputs.windows-pfx }}
      run: npm run make

    # If there is no passed-in tag, we auto-generate one based on run number
    # This makes sure a different process (e.g. a Windows build vs Mac build) hasn't created it
    - name: Check if auto-generated tag exists
      uses: actions/github-script@v4
      id: autogeneratedTagExists
      with:
        github-token: ${{inputs.github-token}}
        script: |
          try {
            const result = await github.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `tags/${context.runNumber}.0.0`
            })
            console.log("Found!")
            console.log(result)
            return true
          } catch(e) {
            console.log("Failed", e)
            return false
          }

    # TODO: The previous GH script should just create the tag if needed
    - name: Create tag if needed
      uses: negz/create-tag@v1
      if: ${{ !steps.autogeneratedTagExists.outputs.result && !startsWith(github.ref, 'refs/tags/v') }}
      with:
        version: ${{ format('{0}.0.0', github.run_number) }}
        message: Auto-generated by GitHub Actions
        token: ${{ inputs.github-token }}

    # The next two steps are identical, except for explicitly passing in the tag name in the latter
    # I wish I knew how to do this in a more elegant way.
    # See also: I'd love to abstract out the startsWith() check and generated tag name into variable
    
    - name: Release on GitHub (Built via Tag)
      uses: softprops/action-gh-release@v1
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        files: |
          app/out/**/*.deb
          app/out/**/*.dmg
          app/out/**/*Setup.exe
          app/out/**/*.rpm
          app/out/**/*.zip
          
    
    - name: Release on GitHub (Automated Tag)
      uses: softprops/action-gh-release@v1
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        tag_name: ${{ format('{0}.0.0', github.run_number) }}
        files: |
          app/out/**/*.deb
          app/out/**/*.dmg
          app/out/**/*Setup.exe
          app/out/**/*.rpm
          app/out/**/*.zip